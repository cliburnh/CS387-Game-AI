package behaviorTree;

import ch.idsia.agents.controllers.BasicMarioAIAgent;
import ch.idsia.benchmark.mario.engine.sprites.Sprite;

public interface Task {
	public boolean run(BasicMarioAIAgent b);
	
	default boolean isCreature(int c)
	{
	    switch (c)
	    {
	        case Sprite.KIND_GOOMBA:
	        case Sprite.KIND_RED_KOOPA:
	        case Sprite.KIND_RED_KOOPA_WINGED:
	        case Sprite.KIND_GREEN_KOOPA_WINGED:
	        case Sprite.KIND_GREEN_KOOPA:
	            return true;
	    }
	    return false;
	}
	
	default boolean isCoin(int c)
	{
	    switch (c)
	    {
	        case -24:
	            return true;
	    }
	    return false;
	}
	
	default boolean clearFront(BasicMarioAIAgent b) {
		int x = marioEgoRow;
	    int y = marioEgoCol;
	    
	    boolean enemyInFront = false;
	    for(int i = 0; i < 3; i++) {
	    	if((isCreature(enemies[x][y + i]) || isCreature(enemies[x + i][y]) || isCreature(enemies[x + i][y + i]))) {
	    		enemyInFront = true;
	    		break;
	    	}
	    }
	    
	    boolean objectInFront = false;
	    for(int i = 0; i < 3; i++) {
	    	if(levelScene[x][y + i] != 0 || levelScene[x + i][y]!= 0 || levelScene[x + i][y + i] != 0) {
	    		objectInFront = true;
	    		break;
	    	}
	    }

		return !enemyInFront && !objectInFront;
	}
	
	default boolean clearBack(BasicMarioAIAgent b) {
		int x = b.getMarioEgoRow();
	    int y = b.getMarioEgoCol();
	    
	    boolean enemyBehind = false;
	    if(isCreature(b.getEnemiesCellValue(x - 1, y))) {
	    	enemyBehind = true;
		}
	    
	    boolean objectBehind = false;
		if(levelScene[x-1][y] != 0) {
			objectBehind = true;
		} else {
			objectBehind = false;
		}
		
		return !enemyBehind && !objectBehind;
	}
}
