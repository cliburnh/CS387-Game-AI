package ch.idsia.agents.controllers;

import ch.idsia.agents.Agent;
import ch.idsia.benchmark.mario.engine.sprites.Mario;
import ch.idsia.benchmark.mario.engine.sprites.Sprite;
import ch.idsia.benchmark.mario.environments.Environment;

public class BehaviorAgent extends BasicMarioAIAgent implements Agent
{
	private boolean coinUpLeft = false;
	private boolean coinUpRight = false;
	private boolean coinLeft = false;
	private boolean coinRight = false;
	
	public BehaviorAgent()
	{
	    super("BehaviorAgent");
	}
	
	int trueJumpCounter = 0;
	int trueSpeedCounter = 0;
	
	private boolean isCreature(int c)
	{
	    switch (c)
	    {
	        case Sprite.KIND_GOOMBA:
	        case Sprite.KIND_RED_KOOPA:
	        case Sprite.KIND_RED_KOOPA_WINGED:
	        case Sprite.KIND_GREEN_KOOPA_WINGED:
	        case Sprite.KIND_GREEN_KOOPA:
	            return true;
	    }
	    return false;
	}
	
	private boolean isCoin(int c)
	{
	    switch (c)
	    {
	        case -24:
	            return true;
	    }
	    return false;
	}
	
	private boolean clearFront() {
		int x = marioEgoRow;
	    int y = marioEgoCol;
	    
	    boolean enemyInFront = false;
	    if(isCreature(enemies[x][y + 1]) || isCreature(enemies[x + 1][y])) {
	    	enemyInFront = true;
		}
	    
	    boolean objectInFront = false;
		if(levelScene[x][y+1] != 0 || levelScene[x][y+1] != 0) {
			objectInFront = true;
		} else {
			objectInFront = false;
		}
		
		return !enemyInFront && !objectInFront;
	}
	
	private boolean clearFront() {
		int x = marioEgoRow;
	    int y = marioEgoCol;
	    
	    boolean enemyInFront = false;
	    if(isCreature(enemies[x][y + 1]) || isCreature(enemies[x + 1][y])) {
	    	enemyInFront = true;
		}
	    
	    boolean objectInFront = false;
		if(levelScene[x][y+1] != 0 || levelScene[x][y+1] != 0) {
			objectInFront = true;
		} else {
			objectInFront = false;
		}
		
		return !enemyInFront && !objectInFront;
	}
	
	//Sequences
	private boolean coinSequence() {
		int x = marioEgoRow;
	    int y = marioEgoCol;
	    
		if(isCoin(mergedObservation[x+1][y+1])) {
			coinUpRight = true;
			return true;
		} else if(isCoin(mergedObservation[x-1][y+1])) {
			coinUpLeft = true;
			return true;
		} else if(isCoin(mergedObservation[x-1][y])) {
			coinLeft = true;
			
			boolean enemyBehind = false;
			if(isCreature(enemies[x-1][y])) {
				enemyBehind = true;
			}
			    
			return !enemyBehind;
		} else if(isCoin(mergedObservation[x+1][y])) {
			coinRight = true;
			
			boolean enemyInFront = false;
			if(isCreature(enemies[x+1][y]) || isCreature(enemies[x+2][y])) {
				enemyInFront = true;
			}
			    
			return !enemyInFront;
		} else {
			return false;
		}
	}
	
	private boolean shootSequence() {
		int x = marioEgoRow;
	    int y = marioEgoCol;
	    
		return (isCreature(enemies[x][y + 3]) || isCreature(enemies[x + 3][y])) && isMarioAbleToShoot;
	}
	
	private boolean forwardSequence() {
		return clearFront();
	}
	
	private boolean forwardJumpSequence() {
		boolean isEnemyInJump = false;
		int x = marioEgoRow;
	    int y = marioEgoCol;
		
		if(isCreature(enemies[x][y + 3]) || isCreature(enemies[x + 3][y])) {
			isEnemyInJump = true;
		}
		
		return (isMarioAbleToJump || !isMarioOnGround) && !isEnemyInJump;
	}
	
	private boolean backwardSequence() {
		int x = marioEgoRow;
	    int y = marioEgoCol;
	    
	    /*System.out.println("Back");
	    System.out.println(levelScene[x][y-2]);
	    System.out.println(levelScene[x][y-1]);
	    System.out.println("------");*/
		if(levelScene[x][y-2] != 0 || levelScene[x][y-1] != 0) {
			return false;
		} else {
			return true;
		}
	}
	
	private boolean backwardJumpSequence() {
		return isMarioAbleToJump;
	}
	
	//Actions
	private void coinAction() {
		if(coinUpLeft) {
			action[Mario.KEY_JUMP] = true;
			action[Mario.KEY_LEFT] = true;
		} else if(coinUpRight) {
			action[Mario.KEY_JUMP] = true;
			action[Mario.KEY_RIGHT] = true;
		} else if(coinLeft) {
			action[Mario.KEY_LEFT] = true;
		} else if(coinRight) {
			action[Mario.KEY_RIGHT] = true;
		}
		
		System.out.println("Coin Near");
	}
	
	private void shootAction() {
		//System.out.println("Shooting");
		action[Mario.KEY_SPEED] = true;
	}
	
	private void forwardAction() {
		//System.out.println("Forward");
		action[Mario.KEY_RIGHT] = true;
	}
	
	private void forwardJumpAction() {
		//System.out.println("Forward Jump");
		action[Mario.KEY_JUMP] = true;
		action[Mario.KEY_RIGHT] = true;
	}
	
	private void backwardAction() {
		//System.out.println("Back");
		action[Mario.KEY_LEFT] = true;
	}
	
	private void backwardJumpAction() {
		//System.out.println("Back Jump");
		action[Mario.KEY_JUMP] = true;
		action[Mario.KEY_LEFT] = true;
	}
	
	//Mehtod to choose
	public boolean[] getAction()
	{	
		reset();
		
		if(coinSequence()) {
	    	coinAction();
	    } else if(shootSequence()) {
	    	shootAction();
	    } else if(forwardSequence()) {
	    	forwardAction();
	    } else if(forwardJumpSequence()) {
	    	forwardJumpAction();
	    } else if(backwardSequence()) {
	    	//backwardAction();
	    } else if(backwardJumpSequence()){
	    	//backwardJumpAction();
	    } else {
	    	//forwardAction();
	    }
	    
	    return action;
	}
	
	public void reset()
	{
		action = new boolean[Environment.numberOfKeys];
	}
}