package controllers;

import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.event.KeyEvent;

import engine.Car;
import engine.Game;
import engine.GameObject;
import engine.RotatedRectangle;
import engine.Vector;

public class AvoidController extends Controller {
	public static final int key_accelerate = KeyEvent.VK_UP;
	public static final int key_brake = KeyEvent.VK_DOWN;
	public static final int key_left = KeyEvent.VK_LEFT;
	public static final int key_right = KeyEvent.VK_RIGHT;
	    
	// store which keys are currently pressed:
	boolean keyboardState[] = new boolean[KeyEvent.KEY_LAST];
	
	private GameObject target;
	
	public AvoidController(GameObject _target) {
		target = _target;    
	}
	
	public Vector seek(Car subject) {
		Vector c = new Vector(subject.getX(), subject.getY());
		
		Vector car = new Vector(subject.getX(), subject.getY());
		Vector targetCar = new Vector(target.getX(), target.getY());
		c = targetCar.minus(car);
		c = c.normalize();
		c = c.times(MAX_ACCELERATION);
		
		//System.out.println(c.toString());
		return c;
	}
	
	public RotatedRectangle collideBox(Car subject, Game game, double angle, double distance) {
		double newX = subject.getX() + Math.cos(angle) * distance;
		double newY = subject.getY() + Math.sin(angle) * distance;
		
		for(GameObject obstcle:game.getObjects()) {
            if (o2.collision(r)) return o2;
        }
		
		return new RotatedRectangle(newX, newY, subject.getImg().getWidth() * 1.0, subject.getImg().getHeight() * 1.0, angle);
	}
	
	public void update(Car subject, Game game, double delta_t, double controlVariables[]) {
	    controlVariables[VARIABLE_STEERING] = 0;
	    controlVariables[VARIABLE_THROTTLE] = 0;
	    controlVariables[VARIABLE_BRAKE] = 0;
	    double castLength = 50;
	    
	    RotatedRectangle rl = collideBox(subject, game, subject.getAngle() - Math.PI/4, castLength);
	    RotatedRectangle rc = collideBox(subject, game, subject.getAngle(), castLength);
	    RotatedRectangle rr = collideBox(subject, game, subject.getAngle() + Math.PI/4, castLength);

	    motorControl(subject, seek(subject), controlVariables);
	}
}

