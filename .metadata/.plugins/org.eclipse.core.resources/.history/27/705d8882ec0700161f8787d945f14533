package controllers;

import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.event.KeyEvent;

import engine.Car;
import engine.Game;
import engine.GameObject;
import engine.Vector;

public class ArriveController extends Controller {
	public static final int key_accelerate = KeyEvent.VK_UP;
	public static final int key_brake = KeyEvent.VK_DOWN;
	public static final int key_left = KeyEvent.VK_LEFT;
	public static final int key_right = KeyEvent.VK_RIGHT;
	    
	// store which keys are currently pressed:
	boolean keyboardState[] = new boolean[KeyEvent.KEY_LAST];
	
	private GameObject target;
	private double slowRadius;
	private double targetRadius;
	
	public ArriveController(GameObject _target, double _slowRadius, double _targetRadius) {
		target = _target;
		slowRadius = _slowRadius;
		targetRadius = _targetRadius;     
	}
	
	public Vector arrive(Car subject) {
		Vector c = new Vector(subject.getX(), subject.getY());
		
		Vector car = new Vector(subject.getX(),  subject.getY());
		Vector targetCar = new Vector(target.getX(), target.getY());
		c = targetCar.minus(car);
		
		//if mag less than target 00
		if(c.magnitude() < targetRadius) {
			return new Vector(0, 0);
		}
		
		double targetSpeed;
		if(c.magnitude() > slowRadius) {
			targetSpeed = MAX_ACCELERATION;
		} else {
			targetSpeed = MAX_ACCELERATION * (c.magnitude()/slowRadius);
		}
		
		c = c.normalize();
		c = c.times(targetSpeed);
		
		c = (c.minus(car));
		//mag > slow target is max * mag/slow
		//normal c * target speed
		//A = (targetVelociy â€“ character.velocity)/time 
	
		
		//System.out.println(c.toString());
		return c;
	}
	
	public void update(Car subject, Game game, double delta_t, double controlVariables[]) {
	    controlVariables[VARIABLE_STEERING] = 0;
	    controlVariables[VARIABLE_THROTTLE] = 0;
	    controlVariables[VARIABLE_BRAKE] = 0;

	    motorControl(subject, arrive(subject), controlVariables);
	}
}
